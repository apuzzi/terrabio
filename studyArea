/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var vis = {"opacity":1,"bands":["red","green","blue"],"min":105,"max":968,"gamma":1};
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var test = ee.FeatureCollection('projects/sig-ee/TerraBio_mu_sfx_box_kilobuff').first().geometry();
//Map.addLayer(test);
//print(ee.Number(test.area()).divide(1e6).round());

var test2 = ee.FeatureCollection('users/an-sig/TerraBio/aoi').first().geometry();
//Map.addLayer(test2);
//print(ee.Number(test2.area()).divide(1e6).round());

Map.centerObject(test2,8);

var mosaics = ee.ImageCollection('projects/servir-amazonia/TerraBio/ImageCollections/Planet')
Map.addLayer(mosaics.filterMetadata('system:index','equals','2019-12-01').first(),vis)
print(mosaics)
print(mosaics.aggregate_array('system:index'))

/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

var dataset = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterDate('2019-01-01', '2020-01-30')
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .map(maskS2clouds);

var visualization = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2'],
};
//print(dataset)
Map.addLayer(dataset.median().clip(test2), visualization, 'RGB');

Export.image.toDrive({
  image: dataset.median().clip(test2),
  region: test2,
  scale:20,
  maxPixels:1e13,
  description:'studyAreaS2',
  fileNamePrefix:'studyAreaS2'
})