var aoi = ee.FeatureCollection('users/an-sig/TerraBio/aoi');
Map.centerObject(aoi,8);

///////////////////////////////// Degradation results ///////////////////////////////////////
var v1 = ee.Image('users/an-sig/TerraBio/DegradML_v1').unmask(4).clip(aoi);
Map.addLayer(v1,{min: 1, max: 4, palette:['4A7E11', 'C71803','6A137A','E5A512']},'ML v1',false);

var v2 = ee.Image('users/an-sig/TerraBio/DegradML_v2').unmask(4).clip(aoi);
Map.addLayer(v2,{min: 1, max: 4, palette:['4A7E11', 'C71803','6A137A','E5A512']},'ML v2',false);

var v3 = ee.Image('users/an-sig/TerraBio/DegradML_v3').unmask(4).clip(aoi);
Map.addLayer(v3,{min: 1, max: 4, palette:['4A7E11', 'C71803','6A137A','E5A512']},'ML v3',false);

var LTv1 = ee.Image('users/an-sig/TerraBio/LTloss_v1');
Map.addLayer(LTv1);

// Forest is green (1), Degradation is red (2), deforestation is purple (3), Non-forest is orange (4)

var options = {
lineWidth: 1,
pointSize: 2,
hAxis: {title: 'Classes'},
vAxis: {title: 'Num of pixels'},
title: 'Number of pixels in each class.',
colors: ['4A7E11', 'C71803','6A137A','E5A512']
}; 

var pixelChart1 = ui.Chart.image.byClass({
  image: ee.Image(1).addBands(v1),
  classBand: 'classification', 
  region: aoi,
  scale: 100,
  reducer: ee.Reducer.count()
}).setOptions(options);

print(pixelChart1);

var pixelChart2 = ui.Chart.image.byClass({
  image: ee.Image(1).addBands(v2),
  classBand: 'classification', 
  region: aoi,
  scale: 100,
  reducer: ee.Reducer.count()
}).setOptions(options);

print(pixelChart2);

/////////////////////////////// Restoration dataset ////////////////////////////////////////
//var sec = ee.Image('users/celsohlsj/public/secondary_forest_extent_collection5_v3').clip(aoi);
var sec = ee.Image('users/celsohlsj/public/secondary_forest_increment_collection5_v3').clip(aoi);
print('Restoration dataset',sec);
Map.addLayer(sec,{bands:['classification_2000'],min:0,max:1},'Sec Forest 2000 (recovery 99-00)',false);
Map.addLayer(sec,{bands:['classification_2010'],min:0,max:1},'Sec Forest 2010 (recovery 09-10)',false);
Map.addLayer(sec,{bands:['classification_2019'],min:0,max:1},'Sec Forest 2019 (recovery 18-19)',false);


///////////////////////////// Land use map //////////////////////////////////////////////////////
// Thibaud's v1

var agroforestry_v1 = ee.Image('users/an-sig/TerraBio/agroforestry_v1');
Map.addLayer(agroforestry_v1,{bands:['b1'],min:-1,max:7,palette:['0ee1c0','dc0f0f','e79848','eae23e','07660a','6464ef','e633ab','2323c0','9e45ca']},'Land use map 2020',false);


//////////////////////////////// Other datasets //////////////////////////////////////////////
// Cocoa farms
var cocoa = ee.FeatureCollection('users/an-sig/TerraBio/cocoa_farms');
Map.addLayer(cocoa,{},'Cocoa farms',false);

// Imaflora properties (land use)
var properties = ee.FeatureCollection('users/an-sig/TerraBio/Imaflora_properties');
Map.addLayer(properties,{},'Imaflora Properties',false);

// Planet imagery
var planet_19_20 = ee.ImageCollection('projects/ee-an-sig/assets/TerraBio/planet').median();
var planet_21_06 = ee.ImageCollection('projects/ee-an-sig/assets/TerraBio/planet_2021-06').median();

Map.addLayer(planet_19_20,{bands:['blue','green','red'],min:250,max:1200},'Planet 2019-12_2020-05 mosaic',false);
Map.addLayer(planet_21_06,{bands:['blue','green','red'],min:280,max:1600},'Planet 2021-06 mosaic',false);







// legend
// Land use
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Create legend title
var legendTitle = ui.Label({
  value: 'Land use map',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});

// Add the title to the panel
legend.add(legendTitle);
    
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
      
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
      
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};


//  Palette with the colors
var palette =['0ee1c0','dc0f0f','e79848','eae23e','07660a','6464ef','e633ab','2323c0','9e45ca'];

// name of the legend
var names = ['No data','Bushland/Grassland','Pasture','Mining','Forest','Agriculture','Urban areas','Water','Cocoa'];

// Add color and and names
for (var i = 0; i < 9; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  

// add legend to map (alternatively you can also print the legend to the console)  
Map.add(legend); 



// Degradation map
// set position of panel
var legend2 = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px'
  }
});

// Create legend title
var legendTitle2 = ui.Label({
  value: 'Degradation map',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});

// Add the title to the panel
legend2.add(legendTitle2);
    
// Creates and styles 1 row of the legend.
var makeRow2 = function(color, name) {
      
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
      
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};


//  Palette with the colors
var palette2 =['4A7E11', 'C71803','6A137A','E5A512'];

// name of the legend
var names2 = ['Stable forest','Degradation','Deforestation','No forest'];

// Add color and and names
for (var i = 0; i < 4; i++) {
  legend2.add(makeRow2(palette2[i], names2[i]));
  }  

// add legend to map (alternatively you can also print the legend to the console)  
Map.add(legend2); 